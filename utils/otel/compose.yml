x-default-logging: &logging
  driver: "json-file"
  options:
    max-size: "5m"
    max-file: "2"

services:
  app:
    image: aspnetapp:${DOTNET_VERSION:-8.0}
    build:
      context: ../../src/aspnetapp
      args:
        - DOTNET_VERSION=${DOTNET_VERSION:-8.0}
    container_name: app
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=5000
      # OpenTelemetry config:
      - OTEL_SERVICE_NAME=aspnetapp
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
    deploy:
      resources:
        limits:
          memory: 100M
    ports:
      - "5000:5000"
    depends_on:
      - otel-collector
      - jaeger
    logging: *logging
  client:
    image: console:${DOTNET_VERSION:-8.0}
    build:
      context: ../../src/Http.Client
      args:
        - DOTNET_VERSION=${DOTNET_VERSION:-8.0}
    entrypoint: "./out/Client http://app:5000/otel"
    container_name: client
    environment:
      # OpenTelemetry config:
      - OTEL_SERVICE_NAME=console
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_LOG_LEVEL=debug
    deploy:
      resources:
        limits:
          memory: 100M
    depends_on:
      - otel-collector
      - app
    logging: *logging
  # Generates request data
  curl:
    image: curlimages/curl:${CURL_VERSION:-latest}
    container_name: curl
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        while true; do
          curl -sL http://app:5000/WeatherForecast;echo
          curl -sL http://app:5000/environment/$${RANDOM};echo
          curl -H 'X-Trace-ID: $${ID}' -sL http://app:5000/api/Sleep?milliseconds=$${RANDOM};echo
        done
    environment:
      - ID=${ID:-}
      - RANDOM=${RANDOM:-}
    deploy:
      resources:
        limits:
          memory: 100M
    depends_on:
      app:
        condition: service_started
    logging: *logging

  ## MONITORING
  jaeger:
    image: jaegertracing/all-in-one:${JAEGER_VERSION:-latest}
    container_name: jaeger
    command:
      - "--memory.max-traces=5000"
    ports:
      - "16686:16686" # Jaeger Web UI
      #- "5775:5775/udp"
      #- "6831:6831/udp"
      #- "6832:6832/udp"
      #- "5778:5778"
      #- "14268:14268"
      - 14269:14269   # Prometheus metrics
      #- "14250:14250"
      #- "9411:9411"
      - "4317:4317" # Jaeger Collector gRPC
      - "4318:4318" # Jaeger Collector HTTP (protobuf)
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      # Service Performance Monitoring (SPM)
      - METRICS_STORAGE_TYPE=prometheus
      - PROMETHEUS_SERVER_URL=http://prometheus:9090
      - PROMETHEUS_QUERY_SUPPORT_SPANMETRICS_CONNECTOR=${PROMETHEUS_QUERY_SUPPORT_SPANMETRICS_CONNECTOR:-true}
      - PROMETHEUS_QUERY_NORMALIZE_CALLS=true
      - PROMETHEUS_QUERY_NORMALIZE_DURATION=true
    logging: *logging
  otel-collector:
    image: otel/opentelemetry-collector-contrib:${OTEL_IMAGE_TAG:-0.89.0}
    volumes:
      - ${OTEL_CONFIG_SRC:-./otel-collector-config-connector.yml}:/etc/otelcol/otel-collector-config.yml
    command: --config /etc/otelcol/otel-collector-config.yml
    container_name: otel
    depends_on:
      - jaeger
  prometheus:
    image: prom/prometheus:${PROMETHEUS_VERSION:-latest}
    container_name: prometheus
    volumes:
      - ${PWD}/prometheus.yml:/etc/prometheus/prometheus.yml
    #command:
    #  - "--enable-feature=otlp-write-receiver"
    ports:
      - "9090:9090"
    depends_on:
      - app
    logging: *logging
  grafana:
    image: grafana/grafana:${GRAFANA_VERSION:-latest}
    container_name: grafana
    volumes:
      - ./grafana.ini:/etc/grafana/grafana.ini
      - ./datasource.yml:/etc/grafana/provisioning/datasources/datasource.yaml
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    logging: *logging
